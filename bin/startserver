#!/usr/bin/env node
/* ================================================================
 * startserver by xdf(xudafeng[at]126.com)
 *
 * first created at : Mon Jun 02 2014 20:15:51 GMT+0800 (CST)
 *
 * ================================================================
 * Copyright 2013 xdf
 *
 * Licensed under the MIT License
 * You may not use this file except in compliance with the License.
 *
 * ================================================================ */

'use strict';

process.title = 'startserver';

var path = require('path');
var net = require('net');
var util = require('xutil');
var ipv4 = require('ipv4') || 'localhost';
var StartServer = require('../');
var exec = require('child_process').exec;
var middleware = require('../lib/middleware');
var markdown = require('../lib/middleware/markdown').markdown;
var platform = process.platform;
var program = require('commander');
var logger = require('logx');
require('colorx');
var pkg = require('../package.json');
var root = process.cwd();
var https = require('https');
var iconv = require('iconv-lite');


program
  .option('-v, --versions', 'output version infomation')
  .option('-n, --normal',  'start server without opening browser')
  .option('-s, --static', 'generate static file for markdown')
  .usage('[port 8080]')
  .parse(process.argv);

if (program.versions) {
  logger.info('your version is ' + pkg.version.gray);
  process.exit(0);
}

if (program.static) {

  var args = program.args;
  if (args.length !== 1) {
    logger.warn('  Arguments Error.'.red + '\n');
    program.help();
    process.exit(0);
  }
  var dir = path.dirname(root).split(path.sep);
  var dist = path.resolve(args[0]);
  var content = markdown('slide', dir[dir.length - 1], path.resolve(args[0]));
  util.file.writeFile(dist + '.html' ,content);
  logger.info('file' + dist + '.html created.');
  process.exit(0);
}


var handle = function() {
  var port = parseInt(program.args[0] || 8080);

  if (isNaN(port)) {
    logger.warn('  Arguments Error.'.red + '\n');
    return program.help();
  }

  var server = new StartServer();

  middleware(server);

  var detectPort = function(callback) {
    var server = net.createServer();
    server.listen(port, ipv4, function (err) {
      server.once('close', function () {
        callback(port)
      });
      server.close();
    });
    server.on('error', function (err) {
      logger.warn(port + ' port is occupied');
      port ++;
      detectPort(callback);
    });
  }

  var execHandle = function() {
    var url = 'http://'.red + ipv4.red + ':'.red + port.gray;
    logger.info('Running at '.gray + url);
  }

  detectPort(function(port) {
    server.listen(port, ipv4, function(e) {
      var url = 'http://' + ipv4 + ':' + port;
      var opener = platform === 'win32' ? 'start' : platform === 'linux' ? 'xdg-open' : 'open';
      if (program.normal) {
        execHandle();
      } else {
        exec(opener + ' ' + url, function(error) {
          if (error !== null) logger.error('exec error: ' + error);
          execHandle();
        });
      }
    });
  });
}

https.get('https://registry.npmjs.org/startserver/latest', function(res) {
  if (res.statusCode !== 200) return handle();
  var buffs = []
  var size = 0;
  res.on('data', function(d) {
    buffs.push(d)
    size += d.length;
  }).on('end', function() {
    var buf = Buffer.concat(buffs, size);
    var str = iconv.decode(buf, 'utf8');
    var data = JSON.parse(str);
    if (data.version && pkg.version !== data.version) {
      logger.warn('Your version [' + pkg.version.red + '] id outdate, please exec '.yellow + 'npm install -g startserver@'.gray + data.version.gray + ' to updateã€‚'.yellow);
    }
    handle();
  });
}).on('error', function(e) {
  handle();
});
