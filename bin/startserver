#!/usr/bin/env node
/* ================================================================
 * startserver by xdf(xudafeng[at]126.com)
 *
 * first created at : Mon Jun 02 2014 20:15:51 GMT+0800 (CST)
 *
 * ================================================================
 * Copyright 2013 xdf
 *
 * Licensed under the MIT License
 * You may not use this file except in compliance with the License.
 *
 * ================================================================ */

'use strict';

process.title = 'startserver';

var path = require('path');
var util = require('xutil');
var ipv4 = require('ipv4') || 'localhost';
var StartServer = require('../');
var exec = require('child_process').exec;
var middleware = require('../lib/middleware');
var markdown = require('../lib/middleware/markdown').markdown;
var platform = process.platform;
var program = require('commander');
var request = require('request');
var logger = require('logx');
require('colorx');
var pkg = require('../package.json');
var open = true;
var root = process.cwd();


program
  .option('-v, --versions', 'output version infomation')
  .option('-n, --normal',  'start server without opening browser')
  .option('-s, --static', 'generate static file for markdown')
  .usage('[port]')
  .parse(process.argv);

if (program.versions) {
  logger.info('your version is ' + pkg.version.gray);
  process.exit(0);
}

if (program.static) {

  var args = program.args;
  if (args.length !== 1) {
    logger.warn('  Arguments Error.'.red + '\n');
    program.help();
    process.exit(0);
  }
  var dir = path.dirname(root).split(path.sep);
  var dist = path.resolve(args[0]);
  var content = markdown('slide', dir[dir.length - 1], path.resolve(args[0]));
  util.file.writeFile(dist + '.html' ,content);
  logger.info('file' + dist + '.html created.');
  process.exit(0);
}

var handle = function() {
  var port = parseInt(program.args[0] || 8080);

  if (isNaN(port)) {
    logger.warn('  Arguments Error.'.red + '\n');
    return program.help();
  }

  var server = new StartServer();

  middleware(server);

  server.listen(port, ipv4, function(e) {
    var url = 'http://' + ipv4 + ':' + port;
    var opener = platform === 'win32' ? 'start' : platform === 'linux' ? 'xdg-open' : 'open';
    !program.normal && exec(opener + ' ' + url);
    url = 'http://' + ipv4.yellow + ':' + port.blue;
    logger.info('Running at '.red + url);
  });
}

var opts = {
  url: 'https://registry.npmjs.org/startserver/latest',
  timeout: 1000
};


request(opts, function(err, res, body) {
  if (err) return handle();
  var data = JSON.parse(body);

  if (data.version && pkg.version !== data.version) {
    logger.warn('Your version [' + pkg.version.red + '] id outdate, please exec '.yellow + 'npm install -g startserver@'.gray + data.version.gray + ' to updateã€‚'.yellow);
  }
  handle();
});
